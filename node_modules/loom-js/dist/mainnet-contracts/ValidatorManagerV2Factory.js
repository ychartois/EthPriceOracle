"use strict";
/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.abi = exports.ValidatorManagerV2Factory = void 0;
var ethers_1 = require("ethers");
var ValidatorManagerV2Factory = /** @class */ (function () {
    function ValidatorManagerV2Factory() {
    }
    ValidatorManagerV2Factory.connect = function (address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    };
    return ValidatorManagerV2Factory;
}());
exports.ValidatorManagerV2Factory = ValidatorManagerV2Factory;
var _abi = [
    {
        constant: true,
        inputs: [
            {
                name: "",
                type: "uint256"
            }
        ],
        name: "validators",
        outputs: [
            {
                name: "",
                type: "address"
            }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
    },
    {
        constant: true,
        inputs: [],
        name: "loomAddress",
        outputs: [
            {
                name: "",
                type: "address"
            }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
    },
    {
        constant: true,
        inputs: [
            {
                name: "",
                type: "uint256"
            }
        ],
        name: "powers",
        outputs: [
            {
                name: "",
                type: "uint64"
            }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
    },
    {
        constant: true,
        inputs: [],
        name: "threshold_denom",
        outputs: [
            {
                name: "",
                type: "uint8"
            }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
    },
    {
        constant: true,
        inputs: [],
        name: "nonce",
        outputs: [
            {
                name: "",
                type: "uint256"
            }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
    },
    {
        constant: true,
        inputs: [],
        name: "threshold_num",
        outputs: [
            {
                name: "",
                type: "uint8"
            }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
    },
    {
        constant: true,
        inputs: [],
        name: "totalPower",
        outputs: [
            {
                name: "",
                type: "uint256"
            }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                name: "_validators",
                type: "address[]"
            },
            {
                name: "_powers",
                type: "uint64[]"
            },
            {
                name: "_threshold_num",
                type: "uint8"
            },
            {
                name: "_threshold_denom",
                type: "uint8"
            },
            {
                name: "_loomAddress",
                type: "address"
            }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                name: "_validators",
                type: "address[]"
            },
            {
                indexed: false,
                name: "_powers",
                type: "uint64[]"
            }
        ],
        name: "ValidatorSetChanged",
        type: "event"
    },
    {
        constant: true,
        inputs: [],
        name: "getPowers",
        outputs: [
            {
                name: "",
                type: "uint64[]"
            }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
    },
    {
        constant: true,
        inputs: [],
        name: "getValidators",
        outputs: [
            {
                name: "",
                type: "address[]"
            }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
    },
    {
        constant: false,
        inputs: [
            {
                name: "_loomAddress",
                type: "address"
            },
            {
                name: "_signersIndexes",
                type: "uint256[]"
            },
            {
                name: "_v",
                type: "uint8[]"
            },
            {
                name: "_r",
                type: "bytes32[]"
            },
            {
                name: "_s",
                type: "bytes32[]"
            }
        ],
        name: "setLoom",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        constant: false,
        inputs: [
            {
                name: "_num",
                type: "uint8"
            },
            {
                name: "_denom",
                type: "uint8"
            },
            {
                name: "_signersIndexes",
                type: "uint256[]"
            },
            {
                name: "_v",
                type: "uint8[]"
            },
            {
                name: "_r",
                type: "bytes32[]"
            },
            {
                name: "_s",
                type: "bytes32[]"
            }
        ],
        name: "setQuorum",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        constant: false,
        inputs: [
            {
                name: "_newValidators",
                type: "address[]"
            },
            {
                name: "_newPowers",
                type: "uint64[]"
            },
            {
                name: "_signersIndexes",
                type: "uint256[]"
            },
            {
                name: "_v",
                type: "uint8[]"
            },
            {
                name: "_r",
                type: "bytes32[]"
            },
            {
                name: "_s",
                type: "bytes32[]"
            }
        ],
        name: "rotateValidators",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        constant: true,
        inputs: [
            {
                name: "_message",
                type: "bytes32"
            },
            {
                name: "_signersIndex",
                type: "uint256"
            },
            {
                name: "_v",
                type: "uint8"
            },
            {
                name: "_r",
                type: "bytes32"
            },
            {
                name: "_s",
                type: "bytes32"
            }
        ],
        name: "signedByValidator",
        outputs: [],
        payable: false,
        stateMutability: "view",
        type: "function"
    },
    {
        constant: true,
        inputs: [
            {
                name: "_message",
                type: "bytes32"
            },
            {
                name: "_signersIndexes",
                type: "uint256[]"
            },
            {
                name: "_v",
                type: "uint8[]"
            },
            {
                name: "_r",
                type: "bytes32[]"
            },
            {
                name: "_s",
                type: "bytes32[]"
            }
        ],
        name: "checkThreshold",
        outputs: [],
        payable: false,
        stateMutability: "view",
        type: "function"
    }
];
exports.abi = _abi;
//# sourceMappingURL=ValidatorManagerV2Factory.js.map